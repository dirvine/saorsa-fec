name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.4.1)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without actually publishing'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a prerelease (contains alpha, beta, rc)
        if echo "$VERSION" | grep -qE "(alpha|beta|rc)"; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
          echo "::error::Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi

    - name: Check if version exists in Cargo.toml
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        if [ "$VERSION" != "$CARGO_VERSION" ]; then
          echo "::error::Version mismatch!"
          echo "Git tag version: $VERSION"
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Please update Cargo.toml version to match the git tag"
          exit 1
        fi

    - name: Validate changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [ -f CHANGELOG.md ]; then
          if ! grep -q "## \[v\?$VERSION\]" CHANGELOG.md; then
            echo "::warning::Version $VERSION not found in CHANGELOG.md"
            echo "Please add changelog entry for this release"
          else
            echo "✅ Changelog entry found for version $VERSION"
          fi
        else
          echo "::warning::No CHANGELOG.md file found"
        fi

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit --locked

    - name: Install cargo-deny
      run: cargo install cargo-deny --locked

    - name: Security audit
      run: cargo audit --deny warnings

    - name: Dependency check
      run: cargo deny check

    - name: Check for unsafe code
      run: |
        if find src/ -name "*.rs" -exec grep -l "unsafe" {} \; | head -1; then
          echo "::warning::Unsafe code detected - requires security review before release"
          find src/ -name "*.rs" -exec grep -l "unsafe" {} \;
        fi

  comprehensive-test:
    name: Comprehensive Testing
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust-version: [1.85.0, stable]
        features: ["", "pure-rust", "isa-l"]
        exclude:
          - os: macos-latest
            features: "isa-l"
          - os: windows-latest
            features: "isa-l"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust ${{ matrix.rust-version }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: release-${{ runner.os }}-${{ matrix.rust-version }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo test --verbose
        else
          cargo test --features "${{ matrix.features }}" --verbose
        fi

    - name: Run doctests
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo test --doc
        else
          cargo test --doc --features "${{ matrix.features }}"
        fi

    - name: Check examples
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo check --examples
        else
          cargo check --examples --features "${{ matrix.features }}"
        fi

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: |
        cargo doc --features pure-rust --no-deps --document-private-items
        
        # Check for documentation warnings
        cargo doc --features pure-rust 2>&1 | tee doc-output.log
        if grep -q "warning:" doc-output.log; then
          echo "::warning::Documentation warnings found"
          cat doc-output.log
        fi

    - name: Check documentation coverage
      run: |
        # Install cargo-doc-coverage if available
        cargo install cargo-doc-coverage --locked || echo "cargo-doc-coverage not available"
        
        # Run documentation coverage check
        cargo doc-coverage --features pure-rust || echo "Documentation coverage check not available"

    - name: Validate README
      run: |
        if [ ! -f README.md ]; then
          echo "::error::README.md file is missing"
          exit 1
        fi
        
        # Check if README has basic sections
        if ! grep -q "## Installation\|## Usage\|## Examples" README.md; then
          echo "::warning::README.md appears to be missing standard sections"
        fi

  publish-dry-run:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    needs: [validate-release, security-check, comprehensive-test, documentation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Dry run publish
      run: |
        echo "Running cargo publish --dry-run..."
        cargo publish --dry-run --features pure-rust
        echo "✅ Dry run successful - package can be published"

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [validate-release, security-check]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: pure-rust
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: isa-l
          - os: macos-latest
            target: x86_64-apple-darwin
            features: pure-rust
          - os: macos-latest
            target: aarch64-apple-darwin
            features: pure-rust
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            features: pure-rust
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: artifacts-${{ matrix.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }}

    - name: Package artifacts
      shell: bash
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        ARCHIVE_NAME="saorsa-fec-v$VERSION-${{ matrix.target }}-${{ matrix.features }}"
        
        mkdir -p artifacts
        
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/saorsa-fec.exe artifacts/
          cd artifacts && 7z a "../$ARCHIVE_NAME.zip" * && cd ..
        else
          cp target/${{ matrix.target }}/release/saorsa-fec artifacts/
          tar -czf "$ARCHIVE_NAME.tar.gz" -C artifacts .
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: saorsa-fec-${{ matrix.target }}-${{ matrix.features }}
        path: |
          *.tar.gz
          *.zip

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, security-check, comprehensive-test, documentation, publish-dry-run]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.dry_run)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Extract changelog for this version if it exists
        if [ -f CHANGELOG.md ] && grep -q "## \[v\?$VERSION\]" CHANGELOG.md; then
          echo "Extracting changelog for version $VERSION..."
          # Extract content between this version and the next version header
          awk "/## \[v?$VERSION\]/,/## \[v?[0-9]/" CHANGELOG.md | head -n -1 | tail -n +2 > release_notes.txt
        else
          echo "Release v$VERSION" > release_notes.txt
          echo "" >> release_notes.txt
          echo "Automated release for version $VERSION" >> release_notes.txt
        fi
        
        # Add commit summary since last tag
        echo "" >> release_notes.txt
        echo "## Changes in this release:" >> release_notes.txt
        
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log --oneline "$LAST_TAG"..HEAD >> release_notes.txt
        else
          git log --oneline -10 >> release_notes.txt
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Release v${{ needs.validate-release.outputs.version }}
        body_path: release_notes.txt
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        draft: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.dry_run)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: publish-final-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
      run: |
        echo "Publishing saorsa-fec v${{ needs.validate-release.outputs.version }} to crates.io..."
        cargo publish --token "$CARGO_REGISTRY_TOKEN"
        echo "✅ Successfully published to crates.io"

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, publish-crate]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Notify completion
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "🎉 Release v$VERSION completed successfully!"
        echo "- ✅ Security checks passed"
        echo "- ✅ All tests passed on multiple platforms"
        echo "- ✅ Documentation validated"
        echo "- ✅ Published to crates.io"
        echo "- ✅ GitHub release created"