name: Security Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security audit daily at 02:00 UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust ${{ matrix.toolchain }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-security-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit --locked

    - name: Install cargo-deny
      run: cargo install cargo-deny --locked

    - name: Run security audit
      run: cargo audit --deny warnings

    - name: Check for banned dependencies
      run: |
        echo "Checking for potentially dangerous dependencies..."
        if cargo tree --format "{p}" | grep -E "(mysql|postgres|openssl-sys)"; then
          echo "::error::Found potentially dangerous dependencies that could introduce vulnerabilities"
          echo "MySQL/PostgreSQL dependencies detected - this could pull in vulnerable RSA implementations"
          exit 1
        fi

    - name: Verify SQLx configuration
      run: |
        echo "Verifying SQLx only uses SQLite..."
        if cargo tree --format "{p}" | grep -E "sqlx-mysql|sqlx-postgres"; then
          echo "::error::Detected SQLx MySQL/PostgreSQL drivers - this could introduce RSA vulnerabilities"
          exit 1
        fi
        echo "✅ SQLx configuration verified - only SQLite driver present"

    - name: Check for unsafe code blocks
      run: |
        echo "Scanning for unsafe code blocks..."
        if find src/ -name "*.rs" -exec grep -l "unsafe" {} \; | head -1; then
          echo "::warning::Unsafe code detected in the following files:"
          find src/ -name "*.rs" -exec grep -l "unsafe" {} \;
          echo "All unsafe code requires security review"
        else
          echo "✅ No unsafe code blocks found"
        fi

    - name: Check for forbidden patterns in production code
      run: |
        echo "Checking for forbidden patterns..."
        EXIT_CODE=0
        
        # Check for unwrap() in production code (tests are OK)
        if find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -l "\.unwrap()" {} \; | head -1; then
          echo "::error::Found .unwrap() in production code:"
          find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -Hn "\.unwrap()" {} \;
          EXIT_CODE=1
        fi
        
        # Check for expect() in production code (tests are OK)
        if find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -l "\.expect(" {} \; | head -1; then
          echo "::error::Found .expect() in production code:"
          find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -Hn "\.expect(" {} \;
          EXIT_CODE=1
        fi
        
        # Check for panic! in production code (tests are OK)
        if find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -l "panic!" {} \; | head -1; then
          echo "::error::Found panic! in production code:"
          find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -Hn "panic!" {} \;
          EXIT_CODE=1
        fi
        
        # Check for todo! and unimplemented!
        if find src/ -name "*.rs" -exec grep -l -E "(todo!|unimplemented!)" {} \; | head -1; then
          echo "::error::Found incomplete implementations:"
          find src/ -name "*.rs" -exec grep -Hn -E "(todo!|unimplemented!)" {} \;
          EXIT_CODE=1
        fi
        
        if [ $EXIT_CODE -eq 0 ]; then
          echo "✅ No forbidden patterns found"
        fi
        
        exit $EXIT_CODE

    - name: License compliance check
      run: cargo deny check licenses

    - name: Dependency ban check
      run: cargo deny check bans

    - name: Check for vulnerabilities with cargo-deny
      run: cargo deny check advisories

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: GPL-2.0-or-later, GPL-3.0-or-later, LGPL-2.1-or-later, LGPL-3.0-or-later, Apache-2.0, MIT, BSD-2-Clause, BSD-3-Clause, ISC, Unlicense

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/rust
          p/security-audit
          p/secrets
        generateSarif: "1"

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      if: always()

  memory-safety:
    name: Memory Safety Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly with Miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Miri
      run: |
        cargo miri setup
        cargo miri test --features pure-rust || echo "::warning::Miri detected potential memory safety issues"

  cryptographic-validation:
    name: Cryptographic Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-crypto-${{ hashFiles('**/Cargo.lock') }}

    - name: Validate cryptographic implementations
      run: |
        echo "Running cryptographic validation tests..."
        cargo test --features pure-rust --lib crypto::tests:: -- --nocapture
        cargo test --features pure-rust --lib quantum_crypto::tests:: -- --nocapture

    - name: Check for side-channel vulnerabilities
      run: |
        echo "Checking for potential side-channel vulnerabilities..."
        # Look for timing-sensitive operations that should use constant-time implementations
        if grep -r "\.cmp\|\.eq\|==" --include="*.rs" src/crypto.rs src/quantum_crypto.rs; then
          echo "::warning::Found potentially non-constant-time comparisons in cryptographic code"
          echo "Please verify these use constant-time implementations"
        fi

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-geiger
      run: cargo install cargo-geiger --locked

    - name: Radiation detection (unsafe usage)
      run: cargo geiger --format GitHubMarkdown >> $GITHUB_STEP_SUMMARY

    - name: Verify dependency sources
      run: |
        echo "Verifying all dependencies come from crates.io..."
        if grep -E "(git|path)\s*=" Cargo.toml; then
          echo "::warning::Found non-crates.io dependencies"
          grep -E "(git|path)\s*=" Cargo.toml
        else
          echo "✅ All dependencies from crates.io"
        fi