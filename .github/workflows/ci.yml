name: saorsa-fec CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, nightly]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust-version }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy
    
    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Clippy linting
      run: cargo clippy --all-targets --features pure-rust -- -D warnings
    
    - name: Build (no features)
      run: cargo build --verbose
    
    - name: Build (pure-rust features)
      run: cargo build --features pure-rust --verbose
    
    - name: Run tests
      run: cargo test --features pure-rust --verbose
    
    - name: Run doctests
      run: cargo test --doc --features pure-rust
    
    - name: Run examples
      if: ${{ hashFiles('examples/*.rs') != '' }}
      run: |
        shopt -s nullglob
        for example in examples/*.rs; do
          ex=$(basename "$example" .rs)
          cargo run --example "$ex"
        done

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --features pure-rust

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Security audit
      run: cargo audit
    
    - name: Check for unsafe code
      run: |
        if grep -r "unsafe" --include="*.rs" src/; then
          echo "::warning::Unsafe code detected - requires manual review"
        fi

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage report
      run: cargo tarpaulin --features pure-rust --out xml --timeout 300
    
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml
        fail_ci_if_error: false

  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check package can be published
      run: cargo publish --dry-run --features pure-rust

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test, security, coverage]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      if: env.CARGO_TOKEN != ''
      env:
        CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      run: |
        cargo publish --token "$CARGO_TOKEN"