name: saorsa-fec CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust-version: [1.85.0, stable, beta]
        features: ["", "pure-rust", "isa-l"]
        exclude:
          # ISA-L is only available on x86_64 Linux
          - os: macos-latest
            features: "isa-l"
          - os: windows-latest
            features: "isa-l"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust-version }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy
    
    - name: Install ISA-L (Linux only)
      if: runner.os == 'Linux' && matrix.features == 'isa-l'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential autoconf automake libtool
        # Install modern nasm (v2.14.01 or later required)
        wget https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2
        tar -xjf nasm-2.15.05.tar.bz2
        cd nasm-2.15.05
        ./configure --prefix=/usr
        make -j$(nproc)
        sudo make install
        cd ..
        rm -rf nasm-2.15.05*
        # Install ISA-L
        git clone https://github.com/intel/isa-l.git
        cd isa-l
        ./autogen.sh
        ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ..
        rm -rf isa-l

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-
    
    - name: Check formatting (stable only)
      if: matrix.rust-version == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check
    
    - name: Check for forbidden patterns
      if: matrix.rust-version == 'stable' && matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo "Checking for forbidden patterns in production code..."
        EXIT_CODE=0
        
        # Check for unwrap() in production code (tests are OK)
        if find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -l "\.unwrap()" {} \; | head -1; then
          echo "::error::Found .unwrap() in production code:"
          find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -Hn "\.unwrap()" {} \;
          EXIT_CODE=1
        fi
        
        # Check for expect() in production code (tests are OK)
        if find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -l "\.expect(" {} \; | head -1; then
          echo "::error::Found .expect() in production code:"
          find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -Hn "\.expect(" {} \;
          EXIT_CODE=1
        fi
        
        # Check for panic! in production code (tests are OK)
        if find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -l "panic!" {} \; | head -1; then
          echo "::error::Found panic! in production code:"
          find src/ -name "*.rs" -not -path "*/tests/*" -exec grep -Hn "panic!" {} \;
          EXIT_CODE=1
        fi
        
        # Check for todo! and unimplemented!
        if find src/ -name "*.rs" -exec grep -l -E "(todo!|unimplemented!)" {} \; | head -1; then
          echo "::error::Found incomplete implementations:"
          find src/ -name "*.rs" -exec grep -Hn -E "(todo!|unimplemented!)" {} \;
          EXIT_CODE=1
        fi
        
        if [ $EXIT_CODE -eq 0 ]; then
          echo "âœ… No forbidden patterns found"
        fi
        
        exit $EXIT_CODE
    
    - name: Clippy linting
      shell: bash
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo clippy --all-targets -- -D warnings -D clippy::correctness -D clippy::suspicious -D clippy::complexity -W clippy::perf -W clippy::style
        else
          cargo clippy --all-targets --features "${{ matrix.features }}" -- -D warnings -D clippy::correctness -D clippy::suspicious -D clippy::complexity -W clippy::perf -W clippy::style
        fi
    
    - name: Build with features
      shell: bash
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo build --verbose
        else
          cargo build --features "${{ matrix.features }}" --verbose
        fi
    
    - name: Run unit tests
      shell: bash
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo test --lib --verbose
        else
          cargo test --lib --features "${{ matrix.features }}" --verbose
        fi
    
    - name: Run integration tests
      shell: bash
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo test --test '*' --verbose
        else
          cargo test --test '*' --features "${{ matrix.features }}" --verbose
        fi
    
    - name: Run doctests
      shell: bash
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo test --doc
        else
          cargo test --doc --features "${{ matrix.features }}"
        fi
    
    - name: Run examples
      if: matrix.rust-version == 'stable'
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows doesn't have nullglob, use different approach
          for example in examples/*.rs; do
            if [ -f "$example" ]; then
              ex=$(basename "$example" .rs)
              if [ "${{ matrix.features }}" = "" ]; then
                cargo run --example "$ex"
              else
                cargo run --example "$ex" --features "${{ matrix.features }}"
              fi
            fi
          done
        else
          shopt -s nullglob
          for example in examples/*.rs; do
            ex=$(basename "$example" .rs)
            if [ "${{ matrix.features }}" = "" ]; then
              cargo run --example "$ex"
            else
              cargo run --example "$ex" --features "${{ matrix.features }}"
            fi
          done
        fi

  minimal-versions:
    name: Minimal Versions Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
    
    - name: Install cargo-hack and cargo-minimal-versions
      run: |
        cargo install cargo-hack cargo-minimal-versions --locked
    
    - name: Check minimal versions
      run: cargo minimal-versions check --features pure-rust

  no-std:
    name: no_std Compatibility
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv7em-none-eabihf
    
    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-nostd-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check no_std compilation (if supported)
      run: |
        # This is a placeholder - implement if the crate supports no_std
        echo "no_std check would go here if supported"

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --features pure-rust

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Security audit
      run: cargo audit
    
    - name: Check for unsafe code
      run: |
        if grep -r "unsafe" --include="*.rs" src/; then
          echo "::warning::Unsafe code detected - requires manual review"
        fi

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage report
      run: cargo tarpaulin --features pure-rust --out xml --timeout 300
    
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml
        fail_ci_if_error: false

  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check package can be published
      run: cargo publish --dry-run --features pure-rust

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test, security, coverage]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      if: env.CARGO_TOKEN != ''
      env:
        CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      run: |
        cargo publish --token "$CARGO_TOKEN"